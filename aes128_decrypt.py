import base64

# Tabla sbox_inv inversa
sbox_inv = (
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
)

def key_expansion(key):
    rcon = (0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36)
    round_keys = list(key)
    
    # Llena la lista de subclaves
    for i in range(4, 44):
        # ultima subclave
        temp = round_keys[(i - 1) * 4:i * 4]

        if i % 4 == 0:
            # Rotación de palabra y sustitución byte
            temp = [temp[1], temp[2], temp[3], temp[0]]
            for j in range(4):
                temp[j] = sbox_inv[temp[j]] # Sustitución byte usando la tabla sbox_inv
            temp[0] ^= rcon[i // 4 - 1] # Aplicar rcon a la primera palabra

        for j in range(4):
            round_keys.extend([round_keys[(i - 4) * 4 + j] ^ temp[j]])

    return round_keys

def add_round_key(state, round_key):
    # Operación XOR entre el estado y la clave de ronda
    return [state[i] ^ round_key[i] for i in range(16)]

# Función InverseSubBytes: Sustituye cada byte del estado por su valor en la tabla sbox_inv.
def inverse_sub_bytes(state):
    return [sbox_inv[byte] for byte in state]

# Función InverseShiftRows: Reorganiza las filas del estado inversamente.
def inverse_shift_rows(state):
    inverse_shift_rows_table = [
        [0, 4, 8, 12],
        [13, 1, 5, 9],
        [10, 14, 2, 6],
        [7, 11, 15, 3]
    ]
    new_state = [0] * 16
    
    for row in range(4):
        for col in range(4):
            new_state[row * 4 + col] = state[inverse_shift_rows_table[row][col]]

    return new_state

def gf_mult(a, b):
    # Multiplicación en el campo Galois (GF(2^8))
    result = 0
    for _ in range(8):
        if b & 1:
            result ^= a
        a <<= 1
        if a & 0x100:
            a ^= 0x11B  # Polinomio irreducible AES
        b >>= 1
    return result

# Función InverseMixColumns: Mezcla los bytes dentro de cada columna del estado inversamente.
def inverse_mix_columns(state):
    inverse_mix_columns_table = [
        [0x0E, 0x0B, 0x0D, 0x09],
        [0x09, 0x0E, 0x0B, 0x0D],
        [0x0D, 0x09, 0x0E, 0x0B],
        [0x0B, 0x0D, 0x09, 0x0E]
    ]
    new_state = [0] * 16
    
    for col in range(4):
        for row in range(4):
            val = 0
            for i in range(4):
                # Multiplicación en el campo Galois inverso y XOR
                val ^= gf_mult(inverse_mix_columns_table[row][i], state[col * 4 + i])
            new_state[col * 4 + row] = val

    return new_state

def aes_decrypt(ciphertext, key):
    state = bytearray(ciphertext)
    key_b = bytearray(key.encode('utf-8'))[:16]   # Clave de 128 bits
    
    # Generar las subclaves
    round_keys = key_expansion(key_b)
    
    # Ronda inicial
    state = add_round_key(state, round_keys[10 * 16:])
    state = inverse_shift_rows(state)
    state = inverse_sub_bytes(state)

    # 9 rondas principales
    for i in range(9, 0, -1):
        state = add_round_key(state, round_keys[i * 16:(i + 1) * 16])
        state = inverse_mix_columns(state)
        state = inverse_shift_rows(state)
        state = inverse_sub_bytes(state)

    # Ronda final
    state = add_round_key(state, round_keys[:16])

    return state

if __name__ == "__main__":
    ciphertext = "9e698744b485a40f015e85a54fa24482"
    key = "ClaveSecreta128b"

    plaintext = aes_decrypt(ciphertext, key)
    print("Plaintext:", plaintext.decode('utf-8'))